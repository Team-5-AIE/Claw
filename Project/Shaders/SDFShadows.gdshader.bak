shader_type canvas_item;
render_mode unshaded;

uniform vec4 ambientColour : source_color;

uniform bool directionalLightEnabled;
uniform float directionalLightAngle : hint_range(0.0, 360.0);
uniform float directionalLightMaxDist = 50;

// xy = pos, z = intensity
uniform vec3 pointLights[1];

void fragment() {
	vec2 sdfPos = screen_uv_to_sdf(SCREEN_UV);
	
	float finalPixelAlpha = ambientColour.a;
	
	// Directional
	float finalDirLightIntensity = 0.0;
	if (directionalLightEnabled)
	{
		float dirLightAngleRad = directionalLightAngle * (3.1416 / 180.0);
		vec2 lightDir = vec2(sin(dirLightAngleRad), cos(dirLightAngleRad));
		
		vec2 sdfSamplePos = sdfPos;
		float accumulator = 0.0;
		while(accumulator < directionalLightMaxDist)
		{
			float dist = texture_sdf(sdfSamplePos);
			accumulator += dist;
			
			if (dist < 0.01) { break; }
			
			sdfSamplePos += dist * lightDir;
		}
		
		float lightIntensity = 1.0;
		if (texture_sdf(sdfPos) >= 0.0)
		{
			lightIntensity = min(1.0, accumulator/directionalLightMaxDist);
		}
		
		finalDirLightIntensity = lightIntensity;
	}
	
	// Point
	// TODO: Remove later, for testing
	bool isLightPixel = false;
	float finalPointLightIntensity = 0.0;
	for (int i = 0; i < pointLights.length(); i++)
	{
		vec2 pixelCoords = FRAGCOORD.xy;
		vec2 pointLightCoords = pointLights[i].xy;
		
		// TODO: Remove later, for testing
		if (length(pointLightCoords - pixelCoords) < 5.0)
		{
			isLightPixel = true;
		}
		
		vec2 lightVector = pointLightCoords - pixelCoords;
		float lightDist = length(lightVector);
		
		if (lightDist < pointLights[i].z)
		{
			vec2 lightDir = normalize(lightVector);
			vec2 sdfSamplePos = sdfPos;
			float accumulator = 0.0;
			float dist = 100.0;
			while(dist > 0.01)
			{
				dist = texture_sdf(sdfSamplePos);
				accumulator += dist;
				
				if (dist < 0.01) { break; }
				
				sdfSamplePos += dist * lightDir;
			}
			
			float lightIntensity = 1.0;
			if (texture_sdf(sdfPos) >= 0.0)
			{
				lightIntensity = min(1.0, accumulator/directionalLightMaxDist);
			}
			
			finalDirLightIntensity = lightIntensity;
		}
	}
	
	finalPixelAlpha -= finalDirLightIntensity;
	
	// TODO: Remove later, for testing
	if (texture_sdf(sdfPos) < 0.0)
	{
		finalPixelAlpha = 0.0;
	}
	
	if (!isLightPixel) { COLOR = vec4(ambientColour.xyz, finalPixelAlpha); }
	else { COLOR = vec4(1, 0, 1, 1); }
}
